/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef regionRPC_H
#define regionRPC_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "RegionServer_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class regionRPCIf {
 public:
  virtual ~regionRPCIf() {}
  virtual void send(std::string& _return, const std::string& command) = 0;
  virtual void recover(std::string& _return, const std::string& log) = 0;
};

class regionRPCIfFactory {
 public:
  typedef regionRPCIf Handler;

  virtual ~regionRPCIfFactory() {}

  virtual regionRPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(regionRPCIf* /* handler */) = 0;
  };

class regionRPCIfSingletonFactory : virtual public regionRPCIfFactory {
 public:
  regionRPCIfSingletonFactory(const ::std::shared_ptr<regionRPCIf>& iface) : iface_(iface) {}
  virtual ~regionRPCIfSingletonFactory() {}

  virtual regionRPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(regionRPCIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<regionRPCIf> iface_;
};

class regionRPCNull : virtual public regionRPCIf {
 public:
  virtual ~regionRPCNull() {}
  void send(std::string& /* _return */, const std::string& /* command */) override {
    return;
  }
  void recover(std::string& /* _return */, const std::string& /* log */) override {
    return;
  }
};

typedef struct _regionRPC_send_args__isset {
  _regionRPC_send_args__isset() : command(false) {}
  bool command :1;
} _regionRPC_send_args__isset;

class regionRPC_send_args {
 public:

  regionRPC_send_args(const regionRPC_send_args&);
  regionRPC_send_args& operator=(const regionRPC_send_args&);
  regionRPC_send_args() noexcept
                      : command() {
  }

  virtual ~regionRPC_send_args() noexcept;
  std::string command;

  _regionRPC_send_args__isset __isset;

  void __set_command(const std::string& val);

  bool operator == (const regionRPC_send_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const regionRPC_send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const regionRPC_send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class regionRPC_send_pargs {
 public:


  virtual ~regionRPC_send_pargs() noexcept;
  const std::string* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _regionRPC_send_result__isset {
  _regionRPC_send_result__isset() : success(false) {}
  bool success :1;
} _regionRPC_send_result__isset;

class regionRPC_send_result {
 public:

  regionRPC_send_result(const regionRPC_send_result&);
  regionRPC_send_result& operator=(const regionRPC_send_result&);
  regionRPC_send_result() noexcept
                        : success() {
  }

  virtual ~regionRPC_send_result() noexcept;
  std::string success;

  _regionRPC_send_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const regionRPC_send_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const regionRPC_send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const regionRPC_send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _regionRPC_send_presult__isset {
  _regionRPC_send_presult__isset() : success(false) {}
  bool success :1;
} _regionRPC_send_presult__isset;

class regionRPC_send_presult {
 public:


  virtual ~regionRPC_send_presult() noexcept;
  std::string* success;

  _regionRPC_send_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _regionRPC_recover_args__isset {
  _regionRPC_recover_args__isset() : log(false) {}
  bool log :1;
} _regionRPC_recover_args__isset;

class regionRPC_recover_args {
 public:

  regionRPC_recover_args(const regionRPC_recover_args&);
  regionRPC_recover_args& operator=(const regionRPC_recover_args&);
  regionRPC_recover_args() noexcept
                         : log() {
  }

  virtual ~regionRPC_recover_args() noexcept;
  std::string log;

  _regionRPC_recover_args__isset __isset;

  void __set_log(const std::string& val);

  bool operator == (const regionRPC_recover_args & rhs) const
  {
    if (!(log == rhs.log))
      return false;
    return true;
  }
  bool operator != (const regionRPC_recover_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const regionRPC_recover_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class regionRPC_recover_pargs {
 public:


  virtual ~regionRPC_recover_pargs() noexcept;
  const std::string* log;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _regionRPC_recover_result__isset {
  _regionRPC_recover_result__isset() : success(false) {}
  bool success :1;
} _regionRPC_recover_result__isset;

class regionRPC_recover_result {
 public:

  regionRPC_recover_result(const regionRPC_recover_result&);
  regionRPC_recover_result& operator=(const regionRPC_recover_result&);
  regionRPC_recover_result() noexcept
                           : success() {
  }

  virtual ~regionRPC_recover_result() noexcept;
  std::string success;

  _regionRPC_recover_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const regionRPC_recover_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const regionRPC_recover_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const regionRPC_recover_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _regionRPC_recover_presult__isset {
  _regionRPC_recover_presult__isset() : success(false) {}
  bool success :1;
} _regionRPC_recover_presult__isset;

class regionRPC_recover_presult {
 public:


  virtual ~regionRPC_recover_presult() noexcept;
  std::string* success;

  _regionRPC_recover_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class regionRPCClient : virtual public regionRPCIf {
 public:
  regionRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  regionRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send(std::string& _return, const std::string& command) override;
  void send_send(const std::string& command);
  void recv_send(std::string& _return);
  void recover(std::string& _return, const std::string& log) override;
  void send_recover(const std::string& log);
  void recv_recover(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class regionRPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<regionRPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (regionRPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recover(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  regionRPCProcessor(::std::shared_ptr<regionRPCIf> iface) :
    iface_(iface) {
    processMap_["send"] = &regionRPCProcessor::process_send;
    processMap_["recover"] = &regionRPCProcessor::process_recover;
  }

  virtual ~regionRPCProcessor() {}
};

class regionRPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  regionRPCProcessorFactory(const ::std::shared_ptr< regionRPCIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< regionRPCIfFactory > handlerFactory_;
};

class regionRPCMultiface : virtual public regionRPCIf {
 public:
  regionRPCMultiface(std::vector<std::shared_ptr<regionRPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~regionRPCMultiface() {}
 protected:
  std::vector<std::shared_ptr<regionRPCIf> > ifaces_;
  regionRPCMultiface() {}
  void add(::std::shared_ptr<regionRPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void send(std::string& _return, const std::string& command) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send(_return, command);
    }
    ifaces_[i]->send(_return, command);
    return;
  }

  void recover(std::string& _return, const std::string& log) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recover(_return, log);
    }
    ifaces_[i]->recover(_return, log);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class regionRPCConcurrentClient : virtual public regionRPCIf {
 public:
  regionRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  regionRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send(std::string& _return, const std::string& command) override;
  int32_t send_send(const std::string& command);
  void recv_send(std::string& _return, const int32_t seqid);
  void recover(std::string& _return, const std::string& log) override;
  int32_t send_recover(const std::string& log);
  void recv_recover(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
